static boolean isCircular( Node head) // Efficient method if simple circular list
{
    // An empty linked list is circular
    if (head == null)
    return true;
 
    // Next of head
    Node node = head.next;
 
    // This loop would stop in both cases (1) If
    // Circular (2) Not circular
    while (node != null && node != head)
    node = node.next;
 
    // If loop stopped because of circular
    // condition
    return (node == head);
}


void FindLoop(node head){ //Universal method
    node t=head;
    node r=head;
    while(r!=null && r.next!=null ){
        t=t.next; 
        r=r.next.next;
        if(t==r){
            s.o.p("Loop Exist");
            break;
         }
      }
 }

//using HashSet
 static boolean detectLoop(Node h)
    {
        HashSet<Node> s = new HashSet<Node>();
        while (h != null) {
            // If we have already has this node
            // in hashmap it means their is a cycle
            // (Because you we encountering the
            // node second time).
            if (s.contains(h))
                return true;
 
            // If we are seeing the node for
            // the first time, insert it in hash
            s.add(h);
 
            h = h.next;
        }
 
        return false;
    }

    